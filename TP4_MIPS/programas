test cortocircuito 1
	prueba cortocircuito con instruccion i+1

000000 sssss ttttt ddddd ----- 100001
000000 00011 00001 00010 00000 100001
r2 = r1 + r3

000000 sssss ttttt ddddd ----- 100001
000000 00010 00010 00100 00000 100001
r4 = r2 + r2

	resultado esperado:
	r2 = 1 + 3 = 4
	r4 = 4 + 4 = 8

611021
422021
----------------------------------------------

test cortocircuito 2
	prueba cortocircuito con instruccion i+2

000000 sssss ttttt ddddd ----- 100011
000000 01000 00010 00001 00000 100011
r1 = r8 - r2

001101 sssss ttttt CCCCCCCCCCCCCCCC
001101 00111 00111 0000000000000000
r7 = r7 or FFFF //nop

000000 sssss ttttt ddddd ----- 100011
000000 00001 00011 00100 00000 100011
r4 = r1 - r3

	resultado esperado:
	r1 = 8 - 2 = 6
	r7 = r7
	r4 = 6 - 3 = 3

1020823
34E70000
232023
----------------------------------------------

test store y load
	prueba guardar registro en memoria y cargar el valor en otro registro

101011 sssss ttttt CCCCCCCCCCCCCCCC
101011 00001 00101 0000000000000001
[r1 + 1] = r5

100011 sssss ttttt CCCCCCCCCCCCCCCC
100011 00001 00011 0000000000000001
r3 = [r1 + 1]

	resultado esperado:
	[2] = 5
	r3 = 5

AC250001
8C230001

----------------------------------------------

test escribir registro antes de leer
	prueba que una instruccion lea el valor actualizado de un registro, y no el viejo

000000 sssss ttttt ddddd ----- 100001
000000 00001 00010 00100 00000 100001
r4 = r1 + r2

001101 sssss ttttt CCCCCCCCCCCCCCCC
001101 00111 00111 0000000000000000
r7 = r7 or FFFF //nop

001101 sssss ttttt CCCCCCCCCCCCCCCC
001101 00111 00111 0000000000000000
r7 = r7 or FFFF //nop

000000 sssss ttttt ddddd ----- 100001
000000 00100 00010 00011 00000 100001
r3 = r4 + r2

	resultado esperado:
	r4 = 1 + 2 = 3
	r3 = 3 + 2 = 5

222021
34E70000
34E70000
821821

----------------------------------------------

test instrucciones 
	prueba el funcionamiento de cada instruccion independientemente

000000 ----- ttttt ddddd SSSSS 000000
000000 00000 00010 00001 00011 000000
r1 = r2 << 3 = 16

208C0

000000 ----- ttttt ddddd SSSSS 000010
000000 00000 01001 00100 00010 000010
r4 = r9 >> 2 = 2

92082

000000 ----- ttttt ddddd SSSSS 000011
000000 00000 01001 00100 00010 000011
r4 = r9 >>> 2 = 2 (signado)

92083

----------------------------------------------

test cortocircuito 3
	instrucciones del libro teorico pagina C18

000000 sssss ttttt ddddd ----- 100001
000000 00010 00011 00001 00000 100001

000000 sssss ttttt ddddd ----- 100011
000000 00001 00101 00100 00000 100011

000000 sssss ttttt ddddd ----- 100100
000000 00001 00111 00110 00000 100100

000000 sssss ttttt ddddd ----- 100101
000000 00001 01001 01000 00000 100101

000000 sssss ttttt ddddd ----- 100110
000000 00001 01011 01010 00000 100110

r1 = r2 + r3
r4 = r1 - r5
r6 = r1 & r7
r8 = r1 | r9
r10 = r1 ^ r11

	resultado esperado:
	r1 = 5
	r4 = 0
	r6 = 5
	r8 = 13 (D)
	r10 = 14 (E)

430821
252023
273024
294025
2B5026

----------------------------------------------

test cortocircuito 4
	instrucciones del libro teorico pagina C19

000000 sssss ttttt ddddd ----- 100001
000000 00010 00011 00001 00000 100001

100011 sssss ttttt CCCCCCCCCCCCCCCC
100011 00001 00100 0000000000000000

r1 = r2 + r3
r4 = [r1]
[r1 + 4] = r4 //este store no funciona porque no hay forwarding en etapa 4

	resultado esperado:
	r1 = 5
	r4 = 5

430821
8C240000

-----------------------------------------

test load byte

	Carga en r2 el contenido de la posicion de memoria [r0 + 1]

100000 sssss ttttt CCCCCCCCCCCCCCCC
100000 00000 00010 0000000000000001

80020001

-----------------------------------------

test load byte unsigned

	Carga en r2 el contenido de la posicion de memoria [r0 + 1]

100000 sssss ttttt CCCCCCCCCCCCCCCC
100100 00000 00010 0000000000000001

90020001

------------------------------------------
store byte 

Carga en la posicion de memoria [r2 + 1] el primer byte(con signo) del registro 1

101000 sssss ttttt CCCCCCCCCCCCCCCC
101000 00010 00001 0000000000000001

A0410001

------------------------------------------
store half word

Carga en la posicion de memoria [r1 + 1] media palabra(con signo) del registro 0

101001 sssss ttttt CCCCCCCCCCCCCCCC
101001 00001 00000 0000000000000001

A4200001

------------------------------------------

test hazard detection

100011 sssss ttttt CCCCCCCCCCCCCCCC
100011 00000 00010 0000000000000001
r2 = [r0 + 1]

000000 sssss ttttt ddddd ----- 100001
000000 00010 00011 00001 00000 100001
r1 = r2 + r3

	resultado esperado:
	r2 = 1
	r1 = 1 + 3 = 4

8C020001
430821

------------------------------------------

test hazard detection 2

100011 sssss ttttt CCCCCCCCCCCCCCCC
100011 00000 00010 0000000000000001
r2 = [r0 + 1]

000000 sssss ttttt ddddd ----- 100100
000000 00010 00101 00100 00000 100100
r4 = r2 & r5

000000 sssss ttttt ddddd ----- 100101
000000 00010 00110 00011 00000 100101
r3 = r2 | r6

000000 sssss ttttt ddddd ----- 100001
000000 00010 00011 00001 00000 100001
r1 = r2 + r3

	resultado esperado:
	r2 = 1
	r4 = r2 & r5 = 1
	r3 = r2 | r6 = 7
	r1 = r2 + r3 = 8

8C020001
452024
461825
430821

------------------------------------------

test branch on equal

000100 sssss ttttt CCCCCCCCCCCCCCCC
000100 00101 00101 0000000000000010

000000 sssss ttttt ddddd ----- 100100
000000 00010 00101 00100 00000 100100

000000 sssss ttttt ddddd ----- 100101
000000 00010 00110 00011 00000 100101

000000 sssss ttttt ddddd ----- 100001
000000 00010 00011 00001 00000 100001

	resultado esperado:
	branch 
	r4 = r2 & r5 = 1
	r3 = r2 | r6 = 	
	r1 = r2 + r3 = 8

10A50002
452024
461825
430821
252023
273024
294025
2B5026

------------------------------------------

test set on less than

000000 00010 00010 00011 00000 101010

42182A

------------------------------------------

test set on less than inmmediate

001010 00010 00011 0000000000000010

------------------------------------------

test jump register

000000 00000 00000 00000 00000 001000

------------------------------------------

test jump and link register

000000 00011 00000 00100 00000 001001

602009

------------------------------------------

test jump and link

000011 00000000000000000000000011

C000003

------------------------------------------

test branch flush pipeline


001000 sssss ttttt CCCCCCCCCCCCCCCC
addi

000100 sssss ttttt CCCCCCCCCCCCCCCC
beq

000101 sssss ttttt CCCCCCCCCCCCCCCC
bneq

001000 00001 00001 0000000000000001
001000 00001 00001 0000000000000010
001000 00001 00001 0000000000000011
001000 00001 00001 0000000000000100

000100 00000 00000 0000000000000101

001000 00010 00010 0000000000000001
001000 00010 00010 0000000000000010
001000 00010 00010 0000000000000011
001000 00010 00010 0000000000000100

001000 00011 00011 0000000000000001

r1 += 1
r1 += 2
r1 += 3
r1 += 4

beq r0, r0, pc+5 (salta a la ultima instruccion)

r2 += 1
r2 += 2
r2 += 3
r2 += 4

r3 += 1

resultado esperado:
r1 = 11
r2 = 2
r3 = 4

20210001
20210002
20210003
20210004
10000004
20420001
20420002
20420003
20420004
20630001
FFFFFFFF

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------TEST TODAS LAS INSTRUCCIONES-------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

1) Test cortocircuito 3 

	r1 = r2 + r3
	r4 = r1 - r5
	r6 = r1 & r7
	r8 = r1 | r9
	r10 = r1 ^ r11

	resultado esperado:
	r1 = 5
	r4 = 0
	r6 = 5
	r8 = 13 (D)
	r10 = 14 (E)

	Tests: cortocircuito a primer operando de la alu, desde instruccion i+1 e i+2.
	Instrucciones usadas: 
	ADDU, SUBU, AND, OR, XOR

430821
252023
273024
294025
2B5026
FFFFFFFF

2) Test cortocircuito 4

	r1 = r2 + r3
	r4 = [r1]

	resultado esperado:
	r1 = 5
	r4 = 5

	Tests: cortocircuito a load. Instrucciones usadas:
	LW

430821
8C240000
FFFFFFFF

3) Test branch flush pipeline

r1 += 1
r1 += 2
r1 += 3
r1 += 4

beq r0, r0, pc+5 (salta a la ultima instruccion)

r2 += 1
r2 += 2
r2 += 3
r2 += 4

r3 += 1

resultado esperado:
r1 = 11
r2 = 2
r3 = 4

Tests: ejecuta un salto entre varias instrucciones. Limpia el pipeline de las instrucciones que involucran r2, y ejecuta la que usa a r3.
Instrucciones usadas: BEQ

20210001
20210002
20210003
20210004
10000004
20420001
20420002
20420003
20420004
20630001
FFFFFFFF

4) test hazard detection 2 (caso del load)

r2 = [r0 + 1]
r4 = r2 & r5
r3 = r2 | r6
r1 = r2 + r3

	resultado esperado:
	r2 = 1
	r4 = r2 & r5 = 1
	r3 = r2 | r6 = 7
	r1 = r2 + r3 = 8

	Tests: deteccion de riesgos. Se realiza un stall entre la primer y segunda instruccion (entre el load y la and).
	Instrucciones utilizadas:
	LB, AND, OR, ADDU

80020001
452024
461825
430821
FFFFFFFF

5) Test jump, jump register

Instrucciones utilizadas:
J, JR, NOR, ADDI, ANDI, ORI, XORI

nor t1, t2, t3
jump pc = 3
addi t2, t2, 1 (si se ejecuta)
addi t2, t2, 2 (no se ejecuta)
addi t2, t2, 3 (no se ejecuta)
ori t0, t0, 11
nor t4, t3, t4
andi t5, t3, 4
jr t0
xori t6, t5, 3 (si se ejecuta)
xori t6, t5, 5 (no se ejecuta)
addi t2, t2, 1

Resultado esperado:

t0 = 11
t1 = -4
t2 = 4
t4 = -8
t5 = 0
t6 = 3

430827
8000005
20420001
20420002
20420003
3400000B
642027
30650004
8
38A60003
38A60005
20420001
FFFFFFFF

6) Test shifts

sll t2, t1, 31
srl t3, t2, 30
sra t4, t2, 30
sw mem[0], t2
sllv t5, t5, t1
srlv t6, t6, t1
srav t4, t4, t1
lh t1, mem[0]

Utiliza todas las instrucciones de shift, de diferente manera para comprobar su funcionamiento logico y aritmetico.
Instrucciones utilizadas:
SLL, SRL, SRA, SW, SLLV, SRLV, SRAV, LH

Resultado esperado:
t1 = 0
t2 = 0x80000000
t3 = 2
t4 = 0xffffffff
t5 = 10
t6 = 3
mem[0] = 0x80000000

117C0
21F82
22783
AC020000
252804
263006
242007
84010000
FFFFFFFF

7) Test load y store

Prueba las instrucciones de store y load signadas y no signadas.
Instrucciones utilizadas:
LWU, LUI, NOR, SH, SB, LH, LHU, LBU

Resultado esperado:

t2 = 1
t3 = 0xFFFFFFFE
t4 = 0x7FFFFFFE
t5 = 0xFFFFFFFE
t6 = 0xFFFE
t7 = 0xFE
t8 = 0
t9 = 1
mem[2] = 0xFFFFFFFE
mem[3] = 0xFFFFFFFE

lwu r2, mem[1]
lui r3, 0x8000
nor r4, r3, r2
sra t3, t3, 30
slt r8, r1, r2
slti r9, r3, 4
sh mem[2], r3
sb mem[3], r3
lh r5, mem[2]
lhu r6, mem[2]
lbu r7, mem[2]

9C020001
3C038000
432027
31F83
43402A
28690004
A4030002
A0030003
84050002
94060002
90070002
FFFFFFFF

8) Test jump, jump register

Instrucciones utilizadas:
JAL, JALR, NOR, ADDI, ANDI, ORI, XORI

nor t1, t2, t3
jump and link pc = 3
addi t2, t2, 1 (si se ejecuta)
addi t2, t2, 2 (no se ejecuta)
addi t2, t2, 3 (no se ejecuta)
ori t0, t0, 11
nor t4, t3, t4
andi t5, t3, 4
jand link register t0
xori t6, t5, 3 (si se ejecuta)
xori t6, t5, 5 (no se ejecuta)
addi t2, t2, 1

Resultado esperado:

t0 = 11
t1 = -4
t2 = 4
t4 = -8
t5 = 0
t6 = 3
t7 = 10
t31 = 3


430827
C000005
20420001
20420002
20420003
3400000B
642027
30650004
3809
38A60003
38A60005
20420001
FFFFFFFF